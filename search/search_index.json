{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Note This website is a work in progress. The shimming-toolbox is open-source Matlab software package enabling a variety of MRI shimming (magnetic field homogenization) techniques such as static and real-time shimming for use with standard manufacturer-supplied gradient/shim coils or with custom \"multi-coil\" arrays.","title":"Home"},{"location":"1_overview/1_introduction/","text":"Introduction Note Add brief description of the project with a simple flowchart","title":"Introduction"},{"location":"1_overview/1_introduction/#introduction","text":"Note Add brief description of the project with a simple flowchart","title":"Introduction"},{"location":"1_overview/2_flowchart/","text":"Flowchart The flowchart describes the different ways the toolbox can be used to shim.","title":"Flowchart"},{"location":"1_overview/2_flowchart/#flowchart","text":"The flowchart describes the different ways the toolbox can be used to shim.","title":"Flowchart"},{"location":"2_getting_started/1_installation/","text":"Installation Before running this software you will need to install the following dependencies: - MATLAB version 2019B or later - Optimization toolbox - Image processing toolbox - dcm2niix - SCT v 4.0.0 To install, download (or git clone ) this repository and add this folder (with sub-folders) to the Matlab path. Start Matlab via the Terminal in order to load the shell environment variable that will be needed to launch UNIX-based software (e.g. FSL Prelude). Note For the command line start, MATLAB also needs to exist within the system path, e.g. For MacOS, add the following lines (adapted to refer to your version of MATLAB) to ~/.bash_profile export PATH=$PATH:/Applications/MATLAB_R2020a.app/bin/ After Matlab has started, add update the environment to access all the functions by running: cd <PATH_SHIMMINGTOOLBOX> startup.m","title":"Installation"},{"location":"2_getting_started/1_installation/#installation","text":"Before running this software you will need to install the following dependencies: - MATLAB version 2019B or later - Optimization toolbox - Image processing toolbox - dcm2niix - SCT v 4.0.0 To install, download (or git clone ) this repository and add this folder (with sub-folders) to the Matlab path. Start Matlab via the Terminal in order to load the shell environment variable that will be needed to launch UNIX-based software (e.g. FSL Prelude). Note For the command line start, MATLAB also needs to exist within the system path, e.g. For MacOS, add the following lines (adapted to refer to your version of MATLAB) to ~/.bash_profile export PATH=$PATH:/Applications/MATLAB_R2020a.app/bin/ After Matlab has started, add update the environment to access all the functions by running: cd <PATH_SHIMMINGTOOLBOX> startup.m","title":"Installation"},{"location":"2_getting_started/2_getting_started/","text":"Getting started (from scratch) To use this library for optimizing a given shim system, that system needs to be defined. This definition occurs via two distinct classes: ShimSpecs( ) System specifications: This is essentially a struct container which defines system parameters concerning amplifier, DAC, etc. and ShimOpt( ) Shim optimization: This class contains a number of methods used to optimize the shim currents for a given field map Both are abstract classes, meaning they cannot, in themselves, be instantiated as objects. Rather, each specific shim system will require corresponding subclasses that inherit from these two templates. For example, ShimSpecs_Greg and ShimOpt_Greg refer to the 8-channel \"AC/DC\" 3T neck coil. If you would like to register a new shim system, create a new folder Shim_MyNewShim. Within it, place and rename copies of the abstract classes in the folder Shim_Template/ . Shim reference (aka \"calibration\") maps Prior to optimizing any shim currents, some experimental data is needed: These reference maps relate the longitudinal magnetic field (delta B0) generated by each shim element to the input current (in A). TODO: Procedure for creating calibration maps. (Also see: Topfer et al. MRM 2016) Once this experimental gradient-echo data is available, one need needs to provide the paths to the DICOM images and to define the corresponding experimental currents used in ShimOpt_MyNewShim.declarecalibrationparameters()... TODO cont... List of available maps: - UNF: https://drive.google.com/drive/folders/1DSCTeh9qRCgS55fWLGtsNeYdq8DsRyMg Download map and copy it under $PATH_SHIMMINGTOOLBOX/data/ Interfacing with hardware: ShimUse( ) and ShimCom( ) The class ShimUse() provides the generic user interface for the shim experiment and should not depend on the specific shim system. It does, however, require the prior definition of concrete ShimSpecs, ShimOpt, and ShimCom subclasses: ShimCom() defines the lower-level communication methods with the shim hardware (e.g. ShimCom.getchanneloutput() and ShimCom.setandloadallshims() ). It is another abstract class, and each shim system requires a corresponding subclass (e.g. ShimCom_MyNewShim() which both inherits from ShimCom() , and defines, for itself, the abstract methods of ShimCom() . SOP Experimental How-to Control room Connect sensor probe to station Plug the optic-to-serial-to-usb (PICTURE) to the computer. If you are running macOS, you might need to install this driver . In the terminal, change to the home directory and open matlab Copy the file shim_params_template.m to shim_params.m and edit shim_params.m according to your setup. Launch experiment by instantiating a ShimUse object with the desired parameters: Shims = ShimUse( shim_params ) See example: shimming-toolbox/example/XXX Class definitions Other classes pertaining to shimming: ProbeTracking( ) Dynamic tracking of resonance offsets (for now: only subject respiration vis-a-vis the respiratory probe...). For the documentation, in the Matlab command prompt type: doc [class name]","title":"Getting started"},{"location":"2_getting_started/2_getting_started/#getting-started","text":"(from scratch) To use this library for optimizing a given shim system, that system needs to be defined. This definition occurs via two distinct classes: ShimSpecs( ) System specifications: This is essentially a struct container which defines system parameters concerning amplifier, DAC, etc. and ShimOpt( ) Shim optimization: This class contains a number of methods used to optimize the shim currents for a given field map Both are abstract classes, meaning they cannot, in themselves, be instantiated as objects. Rather, each specific shim system will require corresponding subclasses that inherit from these two templates. For example, ShimSpecs_Greg and ShimOpt_Greg refer to the 8-channel \"AC/DC\" 3T neck coil. If you would like to register a new shim system, create a new folder Shim_MyNewShim. Within it, place and rename copies of the abstract classes in the folder Shim_Template/ .","title":"Getting started"},{"location":"2_getting_started/2_getting_started/#shim-reference-aka-calibration-maps","text":"Prior to optimizing any shim currents, some experimental data is needed: These reference maps relate the longitudinal magnetic field (delta B0) generated by each shim element to the input current (in A). TODO: Procedure for creating calibration maps. (Also see: Topfer et al. MRM 2016) Once this experimental gradient-echo data is available, one need needs to provide the paths to the DICOM images and to define the corresponding experimental currents used in ShimOpt_MyNewShim.declarecalibrationparameters()... TODO cont... List of available maps: - UNF: https://drive.google.com/drive/folders/1DSCTeh9qRCgS55fWLGtsNeYdq8DsRyMg Download map and copy it under $PATH_SHIMMINGTOOLBOX/data/","title":"Shim reference (aka \"calibration\") maps"},{"location":"2_getting_started/2_getting_started/#interfacing-with-hardware-shimuse-and-shimcom","text":"The class ShimUse() provides the generic user interface for the shim experiment and should not depend on the specific shim system. It does, however, require the prior definition of concrete ShimSpecs, ShimOpt, and ShimCom subclasses: ShimCom() defines the lower-level communication methods with the shim hardware (e.g. ShimCom.getchanneloutput() and ShimCom.setandloadallshims() ). It is another abstract class, and each shim system requires a corresponding subclass (e.g. ShimCom_MyNewShim() which both inherits from ShimCom() , and defines, for itself, the abstract methods of ShimCom() .","title":"Interfacing with hardware: ShimUse( ) and ShimCom( )"},{"location":"2_getting_started/2_getting_started/#sop","text":"Experimental How-to Control room Connect sensor probe to station Plug the optic-to-serial-to-usb (PICTURE) to the computer. If you are running macOS, you might need to install this driver . In the terminal, change to the home directory and open matlab Copy the file shim_params_template.m to shim_params.m and edit shim_params.m according to your setup. Launch experiment by instantiating a ShimUse object with the desired parameters: Shims = ShimUse( shim_params ) See example: shimming-toolbox/example/XXX","title":"SOP"},{"location":"2_getting_started/2_getting_started/#class-definitions","text":"Other classes pertaining to shimming: ProbeTracking( ) Dynamic tracking of resonance offsets (for now: only subject respiration vis-a-vis the respiratory probe...). For the documentation, in the Matlab command prompt type: doc [class name]","title":"Class definitions"},{"location":"2_getting_started/3_help/","text":"Help If you need help using the shimming-toolbox , please contact the developer team via a Github issue .","title":"Help"},{"location":"2_getting_started/3_help/#help","text":"If you need help using the shimming-toolbox , please contact the developer team via a Github issue .","title":"Help"},{"location":"3_contributing/contributing_guidelines/","text":"How to contribute Introduction Programming guidelines Fixing a bug Adding a new feature Commit changes to your branch Submit a pull request Code Review Introduction You can contribute to this repos by opening a Pull Request. Direct push to the master branch is forbidden. If your are new to git or github, the following articles may help you: See Using Pull Requests for more information about Pull Requests. See Fork A Repo for an introduction to forking a repository. See Creating branches for an introduction on branching within GitHub. See Refining patches using git for an introduction to cleaning up git branches. Programming guidelines When contributing to the library, for maintainability, please follow the programming guidelines for Matlab by Richard Johnson. For information on object-oriented programming in Matlab, this quick overview by Kevin P Murphy is excellent. A number of classes are defined as handle as opposed to value classes. For more info on this important distinction, see the Matlab documentation. Fixing a bug In most cases, pull requests for bug fixes should be based on the master branch. Indicate issue number in the commit (see commit section below) Do not close the issue yourself. The issue will be automatically closed when changes are pushed to master. Bug reporting template For issues that are not straight forward, please use the template to structure the bug report: Title: [BUG] Summary of the issue. ex:\"[BUG] sct_image command crashes when cropping image.\" Environment: Specify what OS and software version you are using. Step to reproduce: List all the steps that caused the issue. Expected results: Actual results: Data that caused the issue: Adding a new feature In most cases, pull requests for new features should be based on the master branch. It is important to write a good commit message explaining why the feature is needed. We prefer that the information is in the commit message, so that anyone that want to know two years later why a particular feature can easily find out. It does no harm to provide the same information in the pull request (if the pull request consists of a single commit, the commit message will be added to the pull request automatically). With few exceptions, it is mandatory to write a new test case that tests the feature. The test case is needed to ensure that the features does not stop working in the future. If you are implementing a new feature, also update the documentation to describe the feature. Make sure to cite any papers, algorithms or articles that can help understand the implementation of the feature. Feature request template When proposing a new feature, a discussion will be conducted around the feature. Here a good way to present the new feature in the github issues. Title: [FEATURE] Summary of the feature. Motivation: Explain why the feature is needed. Use Case: Explain how the feature will be used, provide all the necessary steps. Expected Outcome: What will the outcome be. Citation: Provide references to any theoretical work to help the reader better understand the feature. Commit changes to your branch Here are some tips to help the review go smoothly and quickly. Keep it short. Keep the changes less then 50 lines. Focus on committing 1 logical change at a time. Write a verbose commit message. Detailed explanation of a good commit message Correct any code style suggested by an analyser on your changes. Matlab Code Checker . Commit message Title The title should be short (50 chars or less), and should explicitly summarize the changes. If it solves an issue, add at the end: \"fixes #ISSUE_NUMBER\". The message should be preceded by one of the following flags: BUG: - a change made to fix a runtime issue (crash, segmentation fault, exception, incorrect result) REF: - refactoring (edits that don't impact the execution, renaming files, etc.) OPT: - a performance improvement, optimization, enhancement BIN: - any change related to binary files (should rarely be used) NEW: - new functionality added to the project (e.g., new function) DOC: - changes not related to the code (comments, documentation, etc.). TEST: - any change related to the testing (e.g., .travis, etc.) An example commit title might be: BUG: Re-ordering of 4th dimension when apply transformation on 4D scans (fixes #1635) ```` ### Description Add more detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together. Further paragraphs come after blank lines. Bullet points are okay, too Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here Solves #1020 ``` Submit a pull request Title The title should be short (50 chars or less), and should explicitly summarize the purpose of the PR. Labels To help prioritize the request, add labels that describe the type and impact of the change. A change can have multiple types if it is appropriate but would have only 1 impact label. Such as bug documentation fix:patch . See label definitions on how to categorize the issue and pull request. TODO: ADD AN EXAMPLE WITH LINK TO PR Code Review What is code review? Any changes submitted to the master branch will go through code review. For a pull request to be accepted: At least 1 member should approve the changes. TravisCI must pass successfully Reviewing members are: * @jcohenadad * @rtopfer * @po09i","title":"How to contribute"},{"location":"3_contributing/contributing_guidelines/#how-to-contribute","text":"Introduction Programming guidelines Fixing a bug Adding a new feature Commit changes to your branch Submit a pull request Code Review","title":"How to contribute"},{"location":"3_contributing/contributing_guidelines/#introduction","text":"You can contribute to this repos by opening a Pull Request. Direct push to the master branch is forbidden. If your are new to git or github, the following articles may help you: See Using Pull Requests for more information about Pull Requests. See Fork A Repo for an introduction to forking a repository. See Creating branches for an introduction on branching within GitHub. See Refining patches using git for an introduction to cleaning up git branches.","title":"Introduction"},{"location":"3_contributing/contributing_guidelines/#programming-guidelines","text":"When contributing to the library, for maintainability, please follow the programming guidelines for Matlab by Richard Johnson. For information on object-oriented programming in Matlab, this quick overview by Kevin P Murphy is excellent. A number of classes are defined as handle as opposed to value classes. For more info on this important distinction, see the Matlab documentation.","title":"Programming guidelines"},{"location":"3_contributing/contributing_guidelines/#fixing-a-bug","text":"In most cases, pull requests for bug fixes should be based on the master branch. Indicate issue number in the commit (see commit section below) Do not close the issue yourself. The issue will be automatically closed when changes are pushed to master.","title":"Fixing a bug"},{"location":"3_contributing/contributing_guidelines/#bug-reporting-template","text":"For issues that are not straight forward, please use the template to structure the bug report: Title: [BUG] Summary of the issue. ex:\"[BUG] sct_image command crashes when cropping image.\" Environment: Specify what OS and software version you are using. Step to reproduce: List all the steps that caused the issue. Expected results: Actual results: Data that caused the issue:","title":"Bug reporting template"},{"location":"3_contributing/contributing_guidelines/#adding-a-new-feature","text":"In most cases, pull requests for new features should be based on the master branch. It is important to write a good commit message explaining why the feature is needed. We prefer that the information is in the commit message, so that anyone that want to know two years later why a particular feature can easily find out. It does no harm to provide the same information in the pull request (if the pull request consists of a single commit, the commit message will be added to the pull request automatically). With few exceptions, it is mandatory to write a new test case that tests the feature. The test case is needed to ensure that the features does not stop working in the future. If you are implementing a new feature, also update the documentation to describe the feature. Make sure to cite any papers, algorithms or articles that can help understand the implementation of the feature.","title":"Adding a new feature"},{"location":"3_contributing/contributing_guidelines/#feature-request-template","text":"When proposing a new feature, a discussion will be conducted around the feature. Here a good way to present the new feature in the github issues. Title: [FEATURE] Summary of the feature. Motivation: Explain why the feature is needed. Use Case: Explain how the feature will be used, provide all the necessary steps. Expected Outcome: What will the outcome be. Citation: Provide references to any theoretical work to help the reader better understand the feature.","title":"Feature request template"},{"location":"3_contributing/contributing_guidelines/#commit-changes-to-your-branch","text":"Here are some tips to help the review go smoothly and quickly. Keep it short. Keep the changes less then 50 lines. Focus on committing 1 logical change at a time. Write a verbose commit message. Detailed explanation of a good commit message Correct any code style suggested by an analyser on your changes. Matlab Code Checker .","title":"Commit changes to your branch"},{"location":"3_contributing/contributing_guidelines/#commit-message","text":"","title":"Commit message"},{"location":"3_contributing/contributing_guidelines/#title","text":"The title should be short (50 chars or less), and should explicitly summarize the changes. If it solves an issue, add at the end: \"fixes #ISSUE_NUMBER\". The message should be preceded by one of the following flags: BUG: - a change made to fix a runtime issue (crash, segmentation fault, exception, incorrect result) REF: - refactoring (edits that don't impact the execution, renaming files, etc.) OPT: - a performance improvement, optimization, enhancement BIN: - any change related to binary files (should rarely be used) NEW: - new functionality added to the project (e.g., new function) DOC: - changes not related to the code (comments, documentation, etc.). TEST: - any change related to the testing (e.g., .travis, etc.) An example commit title might be: BUG: Re-ordering of 4th dimension when apply transformation on 4D scans (fixes #1635) ```` ### Description Add more detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together. Further paragraphs come after blank lines. Bullet points are okay, too Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here Solves #1020 ```","title":"Title"},{"location":"3_contributing/contributing_guidelines/#submit-a-pull-request","text":"","title":"Submit a pull request"},{"location":"3_contributing/contributing_guidelines/#title_1","text":"The title should be short (50 chars or less), and should explicitly summarize the purpose of the PR.","title":"Title"},{"location":"3_contributing/contributing_guidelines/#labels","text":"To help prioritize the request, add labels that describe the type and impact of the change. A change can have multiple types if it is appropriate but would have only 1 impact label. Such as bug documentation fix:patch . See label definitions on how to categorize the issue and pull request. TODO: ADD AN EXAMPLE WITH LINK TO PR","title":"Labels"},{"location":"3_contributing/contributing_guidelines/#code-review","text":"What is code review? Any changes submitted to the master branch will go through code review. For a pull request to be accepted: At least 1 member should approve the changes. TravisCI must pass successfully Reviewing members are: * @jcohenadad * @rtopfer * @po09i","title":"Code Review"},{"location":"3_contributing/contributors/","text":"Contributors List of contributors.","title":"Contributors"},{"location":"3_contributing/contributors/#contributors","text":"List of contributors.","title":"Contributors"},{"location":"4_about/license/","text":"License and warranty This software is distributed under the following license . THIS SOFTWARE MAY NOT BE USED FOR MEDICAL DIAGNOSIS AS IT IS NOT SANCTIONED BY AUTHORITIES SUCH AS HEALTH CANADA AND THE FOOD AND DRUG ADMINISTRATION. By using this software, you indemnify the General Hospital Corporation (Boston, MA) and Ecole Polytechnique (Montreal, QC) from any liability arising from use of this software. Installation and use of the software shall be construed as consent to waive any future right to take legal action against the above-mentioned parties for any damages related to the use of the software, whether for the software's intended applications or otherwise.","title":"License and warranty"},{"location":"4_about/license/#license-and-warranty","text":"This software is distributed under the following license . THIS SOFTWARE MAY NOT BE USED FOR MEDICAL DIAGNOSIS AS IT IS NOT SANCTIONED BY AUTHORITIES SUCH AS HEALTH CANADA AND THE FOOD AND DRUG ADMINISTRATION. By using this software, you indemnify the General Hospital Corporation (Boston, MA) and Ecole Polytechnique (Montreal, QC) from any liability arising from use of this software. Installation and use of the software shall be construed as consent to waive any future right to take legal action against the above-mentioned parties for any damages related to the use of the software, whether for the software's intended applications or otherwise.","title":"License and warranty"},{"location":"5_other-ressources/hardware/assembly/","text":"Assembly","title":"Assembly"},{"location":"5_other-ressources/hardware/assembly/#assembly","text":"","title":"Assembly"},{"location":"5_other-ressources/hardware/description/","text":"Description of harware with amplifiers","title":"Description of harware with amplifiers"},{"location":"5_other-ressources/hardware/description/#description-of-harware-with-amplifiers","text":"","title":"Description of harware with amplifiers"}]}